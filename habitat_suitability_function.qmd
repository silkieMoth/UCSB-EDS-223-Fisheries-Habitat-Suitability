---
title: "California Fisheries Habitat Suitability"
subtitle: "A function that takes an aquatic species' survivable range of depth and temperature to create a habitat suitability map. Created with aquaculture in mind."
author: 'Joshua Paul Cohen'
date: last-modified
format: html
editor: source
theme: 
  - cerulean
  - custom.scss
---

# Habitat Suitability Function

**This .qmd is designed to create a professional html, but includes redundancies that make it sub par for using the function. Please use `make_suitability_map.R' for a better experience making you habitat suitability maps.**

In this project, we create a generalized function that receives:

-   A species name
-   The sea surface temperature range for said species (minimum/maximum)
-   The depth range for said species (minimum/maximum)

## Full Workflow

### Load and Prepare Data

The function is dependent on these datasets:

-   Sea surface temperature from NOAA
-   Bathymetry from GEBCO
-   Exclusive economic zones from marineregions.org

*See citations section for more information.*

```{r, message=FALSE}
#| code-fold: true

library(tidyverse)
library(tmap)
library(sf)
library(stars)
library(terra)
library(testthat)

# west coast exclusive economic zones
eez <- st_read(here::here('data', 'wc_regions_clean.shp'), quiet = TRUE)

# general bathymetric chart of the oceans
bathy <- rast(here::here('data', 'depth.tif'))

# sea surface temperature rasters from 2008 - 2012
sst <- c(rast(here::here('data', 'average_annual_sst_2008.tif')),
                    rast(here::here('data', 'average_annual_sst_2009.tif')),
                    rast(here::here('data', 'average_annual_sst_2010.tif')),
                    rast(here::here('data', 'average_annual_sst_2011.tif')),
                    rast(here::here('data', 'average_annual_sst_2012.tif')))

# transforming all crs to california albers
eez <- st_transform(eez, crs = 'epsg:4326')
crs(bathy) <- 'epsg:4326'
crs(sst) <- 'epsg:4326'

```

</br>

### Process Data

Operations performed:

-   Obtained mean of all SST rasters from 2008-2012
-   Converted SST from kelvin to celcius
-   Cropped and resampled the depth raster to match the SST raster in depth and resolution

```{r}
#| code-fold: true

# get mean of all sst rasters by cell
mean_sst <- mean(sst)

# convert average sst from kelvin to celsius
mean_sst_c <- mean_sst - 273.15

# crop depth raster to equal that of sst raster
# these don't match exactly, will this be a problem?
bathy_crop <- crop(bathy, mean_sst_c)

# resample bathymetry to match resolution of sst
bathy_resample <- resample(bathy_crop, mean_sst_c, method = 'near')
```

```{r, eval=FALSE, include=FALSE, echo=FALSE}
# Testing for successful cropping and resampling.

# test that extents and resolution of bathymetry and sst match
if (ext(bathy_resample) == ext(mean_sst_c) & 
    res(bathy_resample)[1] == res(mean_sst_c)[1] & 
    res(bathy_resample)[2] == res(mean_sst_c)[2] & 
    crs(bathy_resample) == crs(mean_sst_c)) {
  cat('Extent, resolution, and CRS of Bathymetry and SST match exactly.\n')
} else {
  stop('One of (extent, resolution, CRS) does not match between bathymetry and SST.\n')
}
```
```{r, eval=FALSE, include=FALSE, echo=FALSE}
#| code-fold: true

# try stacking sst with depth raster before resample, expect fail
tryCatch(
  expr = {
    bathy_sst_test_stack <- c(bathy_crop, mean_sst_c) 
    cat("No error, raster's stacked.\n")
    }, 
  error = function(e) {
    message('Attempting to stack sst and depth before resampling failed, as expected.')
  }
)
```
```{r, eval=FALSE, include=FALSE, echo=FALSE}
#| code-fold: true

# try stacking sst with depth raster after resample, expect success
tryCatch(
  expr = {
    bathy_sst_test_stack <- c(bathy_resample, mean_sst_c) 
    cat("Resampled bathymetry and SST rasters stack properly, as expected.\n")
    }, 
  error = function(e) {
    message('Unexpected Error. One of (extent, resolution, CRS) does not match between bathymetry and SST.\n')
  }
)
```

</br>

### Create generalized function

```{r, results='hide', echo=FALSE}
# this code chunk will create the function, but will not show in the quarto doc

eez_map <- function(species, min_depth, max_depth, min_temp, max_temp) {

# make bathymetry reclass matrix based on parameters
bathy_reclass <- matrix(c(-Inf, min_depth, 0,
                          min_depth, max_depth, 1,
                          max_depth, Inf, 0), 
                          ncol = 3,
                          byrow = TRUE)

# make sst reclass matrix based on parameters
sst_reclass <- matrix(c(-Inf, min_temp, 0, 
                        min_temp, max_temp, 1, 
                        max_temp, Inf, 0), 
                        ncol = 3,
                        byrow = TRUE)

# reclassify bathymetry for suitable habitat
bathy_habitat <- classify(bathy_resample, bathy_reclass)

# reclassify sst for suitable habitat
sst_habitat <- classify(mean_sst_c, sst_reclass)

# test that classify functioned as expected.
tryCatch(
  expr = {
    expect_setequal(as.vector(minmax(bathy_habitat)), c(0,1)) 
    expect_setequal(as.vector(minmax(sst_habitat)), c(0,1)) 
    cat("Reclass completed sucessfully. All cell values in rasters changed to 0 and 1.\n")
    }, 
  error = function(e) {
    message('Reclass error. One or both SST or Bathymetry rasters contain a cell value other than 0 or 1.\n')
  }
)

# reclassify cells that are suitable for both sst and bathymetry
suitability <- lapp(c(bathy_habitat, sst_habitat), fun = function(x, y){ ifelse(x == 1 & y == 1, 1, 0)})

# change all 0 values to NA in suitability raster
suitability[suitability == 0] <- NA

# suitable cell selection test
tryCatch(
  expr = {
    
    # create condition based on suitability of bathy and sst rasters
    condition <- values(bathy_habitat) == 1 & values(sst_habitat) == 1
    
    # test condition suitability equals full suitability raster
    expect_equal(as.logical(na.omit(values(suitability) == 1)),
                 as.logical(na.omit(condition[condition == TRUE])))
    
    cat("Suitability raster matches that of bathymetry and SST suitability.\n")
    }, 
  error = function(e) {
    warning('Suitability mismatch. Potential problems: \n1) Not all suitable cells were selected.\n2) Cells selected that are unsuitable in regards to either SST or bathymetry.')
  }
)

# vectorizing suitable habitat raster
suitability_vec <- suitability %>% 
  as.polygons() %>% 
  st_as_sf()

# check for crs match between vectorized suitable habitat and eez object
if (crs(suitability_vec) == crs(eez)){
  print('CRS match between vectorized suitable habitat and EEZ sf.')
} else{
  stop("CRS's between vectorized suitable habitat and EEZ sf do not match. Match them before proceeding to next step.")
}

# get all eez zones that intersect with suitable habitat
suitable_eez <- eez %>% 
  st_filter(suitability_vec, .predicate = st_intersects)

# template raster for rasterizing suitable eez
eez_rast_template <- rast(ext(mean_sst_c),
                     resolution = res(mean_sst_c),
                     crs = crs(suitable_eez))

# rasterizing suitable eez raster
suitable_eez_rast <- terra::rasterize(suitable_eez, eez_rast_template, field = 'rgn_id')

# check for crs and res consistency in rasterized suitable eez
if((round(res(mean_sst_c), 8) == round(res(suitable_eez_rast), 8))[1] & 
   (round(res(mean_sst_c), 8) == round(res(suitable_eez_rast), 8))[2] &
   crs(mean_sst_c) == crs(suitable_eez_rast) & 
   ext(suitable_eez_rast) == ext(mean_sst_c)){
  print('CRS, resolution, and extent of suitable EEZ raster consistent with data.')
} else {
  warning('Either CRS, resolution, or extent of suitable EEZ raster inconsistent with data.')
}

# get area per cell in suitability raster
suitability_km <- cellSize(suitability,
                           mask = TRUE,
                           unit = 'km')

# check consistency with previous rasters for cell size rasters
if(crs(suitability) == crs(suitability_km) & 
   res(suitability)[1] == res(suitability_km)[1] & 
   res(suitability)[2] == res(suitability_km)[2] &
   ext(suitability) == ext(suitability_km) & 
   nrow(suitability) == nrow(suitability_km)){
  cat('Suitability raster updated with cell size still consistent with previous rasters.')
} else {
  warning('Suitability raster updated with cell size have different CRS, resolution, or extent than previous rasters.')
}

# get total suitable area by suitable eez zone
suitable_area <- zonal(suitability_km, 
                       vect(suitable_eez), 
                       fun = 'sum', 
                       na.rm = TRUE)

# rename suitable area df 'area' col
colnames(suitable_area) <- 'suitable_area'

# attach suitable area calculations to respective eez
eez_totals <- cbind(suitable_eez, suitable_area)

# set osm variable
osm <- tmaptools::read_osm(st_bbox(c(xmin = -140, 
                                     xmax = -106, 
                                     ymax = 50, 
                                     ymin = 29), 
                                   crs = st_crs(eez)), 
                           type = 'esri-topo')

tm_shape(osm) + 
  tm_rgb() +
tm_shape(eez_totals) +
  tm_polygons(col = 'suitable_area', 
              palette = 'Blues', 
              style = 'cat', 
              title = paste0('Area (km', common::supsc(2), ")"),
              lwd = 1.5) + 
  tm_layout(title = paste('Most Suitable Exclusive Economic Zones for', species), 
            asp = 1, 
            inner.margins = c(0.02,0.02,0.1,0.02), 
            legend.position = c(0.75, 0.6), 
            legend.frame = 'grey60',
            title.position = c(0.05, 'top')) + 
  tm_compass(size = 3, 
             type = '4star',
             position = c('left', 0.14)) + 
  tm_scale_bar(position = c('left', 0.08))

}
```

```{r, echo=FALSE, results='hide', include=FALSE}
# this code chunk will run a non-generalized version of the code within the function for purposes of allowing tests to run properly. It will also not show in the quarto render.

# make bathymetry reclass matrix based on parameters
bathy_reclass <- matrix(c(-Inf, -70, 0,
                          -70, 0, 1,
                          0, Inf, 0), 
                          ncol = 3,
                          byrow = TRUE)

# make sst reclass matrix based on parameters
sst_reclass <- matrix(c(-Inf, 11, 0, 
                        11, 30, 1, 
                        30, Inf, 0), 
                        ncol = 3,
                        byrow = TRUE)

# reclassify bathymetry for suitable habitat
bathy_habitat <- classify(bathy_resample, bathy_reclass)

# reclassify sst for suitable habitat
sst_habitat <- classify(mean_sst_c, sst_reclass)

# test that classify functioned as expected.
tryCatch(
  expr = {
    expect_setequal(as.vector(minmax(bathy_habitat)), c(0,1)) 
    expect_setequal(as.vector(minmax(sst_habitat)), c(0,1)) 
    cat("Reclass completed sucessfully. All cell values in rasters changed to 0 and 1.\n")
    }, 
  error = function(e) {
    message('Reclass error. One or both SST or Bathymetry rasters contain a cell value other than 0 or 1.\n')
  }
)

# reclassify cells that are suitable for both sst and bathymetry
suitability <- lapp(c(bathy_habitat, sst_habitat), fun = function(x, y){ ifelse(x == 1 & y == 1, 1, 0)})

# change all 0 values to NA in suitability raster
suitability[suitability == 0] <- NA

# suitable cell selection test
tryCatch(
  expr = {
    
    # create condition based on suitability of bathy and sst rasters
    condition <- values(bathy_habitat) == 1 & values(sst_habitat) == 1
    
    # test condition suitability equals full suitability raster
    expect_equal(as.logical(na.omit(values(suitability) == 1)),
                 as.logical(na.omit(condition[condition == TRUE])))
    
    cat("Suitability raster matches that of bathymetry and SST suitability.\n")
    }, 
  error = function(e) {
    warning('Suitability mismatch. Potential problems: \n1) Not all suitable cells were selected.\n2) Cells selected that are unsuitable in regards to either SST or bathymetry.')
  }
)

# vectorizing suitable habitat raster
suitability_vec <- suitability %>% 
  as.polygons() %>% 
  st_as_sf()

# check for crs match between vectorized suitable habitat and eez object
if (crs(suitability_vec) == crs(eez)){
  print('CRS match between vectorized suitable habitat and EEZ sf.')
} else{
  stop("CRS's between vectorized suitable habitat and EEZ sf do not match. Match them before proceeding to next step.")
}

# get all eez zones that intersect with suitable habitat
suitable_eez <- eez %>% 
  st_filter(suitability_vec, .predicate = st_intersects)

# template raster for rasterizing suitable eez
eez_rast_template <- rast(ext(mean_sst_c),
                     resolution = res(mean_sst_c),
                     crs = crs(suitable_eez))

# rasterizing suitable eez raster
suitable_eez_rast <- terra::rasterize(suitable_eez, eez_rast_template, field = 'rgn_id')

# check for crs and res consistency in rasterized suitable eez
if((round(res(mean_sst_c), 8) == round(res(suitable_eez_rast), 8))[1] & 
   (round(res(mean_sst_c), 8) == round(res(suitable_eez_rast), 8))[2] &
   crs(mean_sst_c) == crs(suitable_eez_rast) & 
   ext(suitable_eez_rast) == ext(mean_sst_c)){
  print('CRS, resolution, and extent of suitable EEZ raster consistent with data.')
} else {
  warning('Either CRS, resolution, or extent of suitable EEZ raster inconsistent with data.')
}

# get area per cell in suitability raster
suitability_km <- cellSize(suitability,
                           mask = TRUE,
                           unit = 'km')

# check consistency with previous rasters for cell size rasters
if(crs(suitability) == crs(suitability_km) & 
   res(suitability)[1] == res(suitability_km)[1] & 
   res(suitability)[2] == res(suitability_km)[2] &
   ext(suitability) == ext(suitability_km) & 
   nrow(suitability) == nrow(suitability_km)){
  cat('Suitability raster updated with cell size still consistent with previous rasters.')
} else {
  warning('Suitability raster updated with cell size have different CRS, resolution, or extent than previous rasters.')
}

# get total suitable area by suitable eez zone
suitable_area <- zonal(suitability_km, 
                       vect(suitable_eez), 
                       fun = 'sum', 
                       na.rm = TRUE)

# rename suitable area df 'area' col
colnames(suitable_area) <- 'suitable_area'

# attach suitable area calculations to respective eez
eez_totals <- cbind(suitable_eez, suitable_area)

# set osm variable
osm <- tmaptools::read_osm(st_bbox(c(xmin = -140, 
                                     xmax = -106, 
                                     ymax = 50, 
                                     ymin = 29), 
                                   crs = st_crs(eez)), 
                           type = 'esri-topo')

tm_shape(osm) + 
  tm_rgb() +
tm_shape(eez_totals) +
  tm_polygons(col = 'suitable_area', 
              palette = 'Blues', 
              style = 'cat', 
              title = paste0('Area (km', common::supsc(2), ")"),
              lwd = 1.5) + 
  tm_layout(title = paste('Most Suitable Exclusive Economic Zones for', 'Oysters'), 
            asp = 1, 
            inner.margins = c(0.02,0.02,0.1,0.02), 
            legend.position = c(0.75, 0.6), 
            legend.frame = 'grey60',
            title.position = c(0.05, 'top')) + 
  tm_compass(size = 3, 
             type = '4star',
             position = c('left', 0.14)) + 
  tm_scale_bar(position = c('left', 0.08))
```

1.  Function `eez_map` will contain argument `species` expecting a string, and `min_depth, max_depth, min_temp, max_temp` expecting integers.

```{r, eval=FALSE}
eez_map <- function(species, min_depth, max_depth, min_temp, max_temp) {
```

2.  The bathymetry and sea surface temperature rasters are reclassified for binary suitability based on the inputted depth and temperature arguments.

```{r, eval=FALSE}
# make bathymetry reclass matrix based on parameters
bathy_reclass <- matrix(c(-Inf, min_depth, 0,
                          min_depth, max_depth, 1,
                          max_depth, Inf, 0), 
                          ncol = 3,
                          byrow = TRUE)

# make sst reclass matrix based on parameters
sst_reclass <- matrix(c(-Inf, min_temp, 0, 
                        min_temp, max_temp, 1, 
                        max_temp, Inf, 0), 
                        ncol = 3,
                        byrow = TRUE)

# reclassify bathymetry for suitable habitat
bathy_habitat <- classify(bathy_resample, bathy_reclass)

# reclassify sst for suitable habitat
sst_habitat <- classify(mean_sst_c, sst_reclass)
```

3.  The resulting bathymetry and SST suitability rasters are cross-referenced to create a raster that reflects suitability for both parameters.

```{r, eval=FALSE}
# reclassify cells that are suitable for both sst and bathymetry
suitability <- lapp(c(bathy_habitat, sst_habitat), fun = function(x, y){ ifelse(x == 1 & y == 1, 1, 0)})

# change all 0 values to NA in suitability raster
suitability[suitability == 0] <- NA
```

4.  Convert habitat suitability raster to vector, and perform spatial selection with intersecting EEZ zones.

```{r, eval=FALSE}
# vectorizing suitable habitat raster
suitability_vec <- suitability %>% 
  as.polygons() %>% 
  st_as_sf()

# get all eez zones that intersect with suitable habitat
suitable_eez <- eez %>% 
  st_filter(suitability_vec, .predicate = st_intersects)
```

5.  Get total area within each EEZ zone that is suitable habitat for selected species based on inputted argument values.

    a.  Convert subsetted EEZ vector to raster.

```{r, eval=FALSE}
# template raster for rasterizing suitable eez
eez_rast_template <- rast(ext(mean_sst_c),
                         resolution = res(mean_sst_c),
                         crs = crs(suitable_eez))

    # rasterizing suitable eez raster
    suitable_eez_rast <- terra::rasterize(suitable_eez, eez_rast_template, field = 'rgn_id')
```

   b. Compute area (km) by cell in habitat suitability raster.

```{r, eval=FALSE}
# get area per cell in suitability raster
suitability_km <- cellSize(suitability,
                           mask = TRUE,
                           unit = 'km')
```

   c. Crossreference area per cell and and suitable EEZ zones to compute total suitable habitat area per zone.

```{r, eval=FALSE}
# get total suitable area by suitable eez zone
suitable_area <- zonal(suitability_km, 
                       vect(suitable_eez), 
                       fun = 'sum', 
                       na.rm = TRUE)

# rename suitable area df 'area' col
colnames(suitable_area) <- 'suitable_area'

# attach suitable area calculations to respective eez
eez_totals <- cbind(suitable_eez, suitable_area)
```

6.  Create the Map.

```{r, eval=FALSE}
# set osm variable
osm <- tmaptools::read_osm(st_bbox(c(xmin = -140, 
                                     xmax = -106, 
                                     ymax = 50, 
                                     ymin = 29), 
                                   crs = st_crs(eez)), 
                           type = 'esri-topo')

tm_shape(osm) + 
  tm_rgb() +
tm_shape(eez_totals) +
  tm_polygons(col = 'suitable_area', 
              palette = 'Blues', 
              style = 'cat', 
              title = paste0('Area (km', common::supsc(2), ")"),
              lwd = 1.5) + 
  tm_layout(title = paste('Most Suitable Exclusive Economic Zones for', species), 
            asp = 1, 
            inner.margins = c(0.02,0.02,0.1,0.02), 
            legend.position = c(0.75, 0.6), 
            legend.frame = 'grey60',
            title.position = c(0.05, 'top')) + 
  tm_compass(size = 3, 
             type = '4star',
             position = c('left', 0.14)) + 
  tm_scale_bar(position = c('left', 0.08))

}
```

### <u> Using the Function for Mapmaking</u></br>

##### Oyster (Subclass *Pteriomorphia*) Parameters:

-   Depth range (MBSL): 0 - 70
-   Temperature range (C): 11 - 30

```{r, results='hide'}
eez_map(species = 'Oysters', min_depth = -70, max_depth = 0, min_temp = 11, max_temp = 30)
```

*Figure 1: Oysters have the most Pacific habitat along the south of the United States, when accounting for water depth and temperature alone. However, the north also has habitat present, with only Northern California being habitat poor.*

##### Pacific Geoduck (*Panopea generosa*) Parameters:

-   Depth range (MBSL): 0 - 110
-   Temperature range (C): 8.3 - 12.8

```{r, results='hide'}
eez_map(species = 'Pacific Geoduck', min_depth = -110, max_depth = 0, min_temp = 8.3, max_temp = 12.8)
```

*Figure 2: Pacific Geoduck has the most suitable habitat in the northern sections of the Pacific coast, when accounting for water depth and temperature alone. However, Northern and Central California are also abundant in habitat, with only Southern CA poor habitat overall.*

## Data Citations

| Data | Citation | Link |
|------------------------|------------------------|------------------------|
| OpenStreetMap from Geofabrik | Fellows I, Stotz utJlbJP (2023). *OpenStreetMap: Access to Open Street Map Raster Images*. R package version 0.4.0, https://CRAN.R-project.org/package=OpenStreetMap | [Link](https://www.openstreetmap.org) |
| Pacific Geoduck page on SeaLifeBase | Pacific Northwest Shell Club 2014 Pacific Northwest marine molluscan biodiversity. Pacific Northwest Shell Club, www.PNWCS.org. http://www.bily.com/pnwsc/web-content/Northwest%20Marine%20Molluscan%20Biodiversity.html \[Accessed 06/02/2014\]. | [Link](https://www.sealifebase.ca/summary/Panopea-generosa.html) |
| NOAA’s 5km Daily Global Satellite Sea Surface Temperature Anomaly v3.1. | NOAA Coral Reef Watch. 2018. Daily Global 5km Satellite Sea Surface Temperature Anomaly. Version 3.1, released August 1, 2018. | [Link](https://coralreefwatch.noaa.gov/product/5km/index_5km_ssta.php) |
| GEBCO California Bathymetry Data | GEBCO Compilation Group (2024) GEBCO 2024 Grid (doi:10.5285/1c44ce99-0a0d-5f4f-e063-7086abc0ea0f) | [Link](https://www.gebco.net/data_and_products/gridded_bathymetry_data/#area) |
| Exclusive Economic Zone Boundaries | Flanders Marine Institute (2024). Union of the ESRI Country shapefile and the Exclusive Economic Zones (version 4). Available online at https://www.marineregions.org/. https://doi.org/10.14284/698. Consulted in 2024. | [Link](https://www.marineregions.org/eez.php) |
